{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python_defaultSpec_1596211894441",
   "display_name": "Python 3.6.10 64-bit ('pyt': conda)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python Tutorials | List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "90\n"
    }
   ],
   "source": [
    "# You can store a lot of data in one place\n",
    "\n",
    "grades = [90,53,62,75,96,31]\n",
    "print(grades[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "96\n"
    }
   ],
   "source": [
    "#Print counting from the end\n",
    "print(grades[-2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "[62, 75]\n"
    }
   ],
   "source": [
    "#Print a range\n",
    "print(grades[2:4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "[62, 75, 96, 31]\n"
    }
   ],
   "source": [
    "#Print from a position to the end\n",
    "print(grades[2:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "[90, 53, 62, 75, 96, 31]\n"
    }
   ],
   "source": [
    "#Print all\n",
    "print(grades[:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "[31, 96, 75, 62, 53, 90]\n"
    }
   ],
   "source": [
    "#Print the flip version [start:end:interval]\n",
    "print(grades[::-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Grades =  [20, 65, 100, 61, 83]\nFalse copy =  [20, 65, 100, 61, 83]\nReal copy =  [20, 65, 97, 61, 83]\n"
    }
   ],
   "source": [
    "new_grades = [20,65,97,61,83]\n",
    "# The false copy is pointing to the same list\n",
    "false_copy = new_grades\n",
    "#The real copy is not afected by any modifications to the original\n",
    "real_copy = new_grades[:]\n",
    "new_grades[2]=100\n",
    "\n",
    "print('Grades = ', new_grades)\n",
    "print('False copy = ', false_copy)\n",
    "print('Real copy = ', real_copy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "[1, 2, 3, 2, 3, 5, 6]\n7\n"
    }
   ],
   "source": [
    "#Lenght of a list\n",
    "lista = [1,2,3,2,3,5,6]\n",
    "print(lista)\n",
    "print(len(lista))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Juan Lopez\n['J', 'u', 'a', 'n', ' ', 'L', 'o', 'p', 'e', 'z']\n"
    }
   ],
   "source": [
    "name = \"Juan Lopez\"\n",
    "print(name)\n",
    "# You can convert the string to a list\n",
    "listName = list(name)\n",
    "print(listName)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "['J', 'u', 'a', 'n', 'a', ' ', 'L', 'o', 'p', 'e', 'z']\nJuana Lopez\n<class 'str'>\n"
    }
   ],
   "source": [
    "# The you can add characters, delete or apply some other methods to the list\n",
    "name = \"Juan Lopez\"\n",
    "listName = list(name)\n",
    "# Here we add a letter\n",
    "listName.insert(4,'a')\n",
    "print(listName)\n",
    "# Here we convert back to a string\n",
    "new_name = ''.join(listName)\n",
    "print(new_name)\n",
    "print(type(new_name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}