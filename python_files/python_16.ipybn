{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python_defaultSpec_1596245094536",
   "display_name": "Python 3.6.10 64-bit ('pyt': conda)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Youtube Tutorials | Bitwise Operators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "0b10\n"
    }
   ],
   "source": [
    "# Binary Shifting\n",
    "# 3 = 0b11 \n",
    "# 6 = 0b110\n",
    "print(bin(0b0001 << 1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "0b1010\n"
    }
   ],
   "source": [
    "# This is an and operator\n",
    "a = 0b1011\n",
    "b = 0b1110\n",
    "\n",
    "print(bin(a & b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "0b1011\n"
    }
   ],
   "source": [
    "# This is an or operator\n",
    "a = 0b1011\n",
    "b = 0b1010\n",
    "\n",
    "print(bin(a | b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "0b1\n"
    }
   ],
   "source": [
    "# This is an xor operator\n",
    "a = 0b1011\n",
    "b = 0b1010\n",
    "\n",
    "print(bin(a ^ b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "10\n0b1010\n-10\n-0b1010\n"
    }
   ],
   "source": [
    "# This is an negative operator\n",
    "\n",
    "b = 0b1010\n",
    "print(b)\n",
    "print(bin(b))\n",
    "print(-b)\n",
    "print(bin(-b))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "3\n0b11\n-4\n-0b100\n"
    }
   ],
   "source": [
    "# This is an negative operator\n",
    "\n",
    "b = 0b11\n",
    "print(b)\n",
    "print(bin(b))\n",
    "print(~b)\n",
    "print(bin(~b))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "b\n66\nB\n"
    }
   ],
   "source": [
    "# How to use ASCII\n",
    "\n",
    "letter = 0b01100010\n",
    "mask = 0b11011111\n",
    "\n",
    "print(chr(letter))\n",
    "cap_letter = letter & mask\n",
    "print(cap_letter)\n",
    "print(chr(cap_letter))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}